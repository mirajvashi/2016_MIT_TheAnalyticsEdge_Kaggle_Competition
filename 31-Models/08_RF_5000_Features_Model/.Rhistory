source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
Train = read.csv("../../21-Imputed-Data/Training_Imputed_FULL2.csv")
Train$UserId = NULL
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
f = as.formula("Party ~ YOB")
glmM1 <- glm(f, data = Train, family = "binomial")
predT <- predict(glmM1, type = "response")
m1 = as.matrix(table(Train$Party, predT > 0.5))
m1
2949/nrow(Train)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R')
AutoModel(Train, 101)
rm(f)
rm(m1)
mr(predT)
rm(predT)
rm(glmM1)
glm8Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197, data = Train, family = "binomial")
glm9Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, family = "binomial")
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Gender, data = Train, family = "binomial")
cart7Var = rpart(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181, data = Train, method = "class")
prp(cart7Var)
library(rpart.plot)
prp(cart7Var)
Test = read.csv("../../21-Imputed-Data/Test_Imputed_FULL2.csv")
str(Test)
varTestUserId = Test$UserId
LL
Test$UserId = NULL
predTest = predict(glm8Var, newdata = Test, type = "response")
predKag = as.character(ifelse(predTest < 0.5, "Democrat", "Republican"))
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_01.csv", row.names = FALSE)
write.csv(dfKaggle, "Submission_0613_01_8Var.csv", row.names = FALSE)
predTest = predict(glm9Var, newdata = Test, type = "response")
predKag = as.character(ifelse(predTest < 0.5, "Democrat", "Republican"))
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_01_9Var.csv", row.names = FALSE)
predTest = predict(glm10Var, newdata = Test, type = "response")
predKag = as.character(ifelse(predTest < 0.5, "Democrat", "Republican"))
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_01_10Var.csv", row.names = FALSE)
predTest = predict(cart7Var, newdata = Test, type = "class")
predKag = as.character(predTest)
predKag = NA
predKag = as.character(predTest)
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
View(dfKaggle)
write.csv(dfKaggle, "Submission_0613_01_7VarCART.csv", row.names = FALSE)
summary(glm8Var)
summary(glm9Var)
summary(glm9Var)
summary(glm8Var)
summary(glm9Var)
tmpPred <- predict(cart7Var, Train, type = "class")
View(tmpPred)
tmpPred
tmpPred <- predict(cart7Var, Train, type = "response")
tmpPred <- predict(cart7Var, Train, type = "prob")
tmpPred
head(tmpPred)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
tmpPred[,2]
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
tmpRF = randomForest(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181, data = Train)
tmpPred = predict(tmpRF)
tmpPred = predict(tmpRF, type = "response")
tmpPred
tmpPred = predict(tmpRF, type = "response1")
tmpPred = predict(tmpRF, type = "prob")
tmpPred
head(tmpPred)
summary(tmpPred[,1])
summary(tmpPred[,2])
as.numeric(performance(prediction(tmpPred[ ,2], Train$Party), "auc")@y.values)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 100)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train, 101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train,101)
AutoModel(Train,101)
tmpA = "A"
tmp B = "B"
tmpB = "B"
paste(tmpA, tmpB)
paste(tmpA, tmpB, sep = "")
paste(tmpA, " + ", tmpB, sep = "")
tmpC = as.formula("A + B + 1")
tmpC = as.formula("tmpA + tmpB + 1")
tmpC = as.formula("tmpA + tmpB + 1")
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train,101)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel_V1.0.R')
AutoModel(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
AutoModel(Train,101)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
AutoModel(Train,101)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
AutoModel(Train,101)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
AutoModel(Train,101)
ForwardFeatureSelection(Train, 101)
View(AutoModel)
debugSource('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
ForwardFeatureSelection(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
ForwardFeatureSelection(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
ForwardFeatureSelection(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
ForwardFeatureSelection(Train,101)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
ForwardFeatureSelection(Train,101)
rm(glm10Var)
rm(tmpA)
rm(tmpB)
rm(tmpPred)
rm(tmpRF)
glm10Var = glm(Party ~ Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q116881, data = Train, family = "binomial")
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q116881, data = Train, family = "binomial")
predTest = predict(glm10Var, newdata = Test, type = "response")
predKag = as.character(ifelse(predTest < 0.5, "Democrat", "Republican"))
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_glm10Var.csv", row.names = FALSE)
write.csv(dfKaggle, "Submission_0613_02_glm10Var.csv", row.names = FALSE)
summary(glm10Var)
source('~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/ForwardFeatureSelection.R')
ForwardFeatureSelection(Train,101)
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q120379, data = Train, family = "binomial")
summary(glm10Var)
predTest = predict(glm10Var, newdata = Test, type = "response")
predKag = as.character(ifelse(predTest < 0.5, "Democrat", "Republican"))
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_03_glm10Var.csv", row.names = FALSE)
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q99480, data = Train, family = "binomial")
predTest = predict(glm10Var, newdata = Test, type = "response")
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_04_glm10Var.csv", row.names = FALSE)
dfTrainReduced = Train
dfTrainReduced$YOB = NULL
dfTrainReduced$Income = NULL
dfTrainReduced$EducationLevel = NULL
dfTrainReduced$HouseholdStatus = NULL
dfTrainReduced$Q10922
dfTrainReduced$Q109244 = NULL
dfTrainReduced$Q115611 = NULL
dfTrainReduced$Q113181 = NULL
dfTrainReduced$Q98197 = NULL
dfTrainReduced$Q101163 = NULL
rfFSelect = randomForest(Party ~ ., data = dfTrainReduced, ntree = 5000)
varImpPlot(rfFSelect)
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q100010, data = Train, family = "binomial")
summary(glm10Var)
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q98869, data = Train, family = "binomial")
summary(glm10Var)
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Gender, data = Train, family = "binomial")
summary(glm10Var)
glm7Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181, data = Train, family = "binomial")
summary(glm7Var)
glm6Var = glm(Party ~ YOB + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181, data = Train, family = "binomial")
summary(glm6Var)
summary(Train$YOB)
summary(Test$YOB)
sum(Train$YOB > 200)
sum(Train$YOB > 2003)
Train$Age = 2016 - Train$YOB
View(Train)
Train$Age = NULL
TrainNoYOB = Train
TrainNoYOB$Age = 2016 - Train$YOB
TrainNoYOB$YOB = NULL
smmary(TrainNoYOB$Age)
summary(TrainNoYOB$Age)
summary(2016-Test$YOB)
sum(TrainNoYOB$Age)
sum(TrainNoYOB$Age<13)
rfFSelect = randomForest(Party ~ ., data = TrainNoYOB, ntree = 1000)
varImpPlot(rfFSelect)
tmp <- varImpPlot(rfFSelect)
tmp
dfTrainReduced$AgeNorm = (dfTrainReduced$Age - mean(dfTrainReduced$Age))/sd(dfTrainReduced$Age)
mean(dfTrainReduced$Age)
str(dfTrainReduced)
str(dfTrainReduced$Age)
TrainNoYOB$AgeNorm = (TrainNoYOB$Age - mean(TrainNoYOB$Age))/sd(TrainNoYOB$Age)
rfFSelect = randomForest(Party ~ . -Age, data = TrainNoYOB, ntree = 1000)
varImpPlot(rfFSelect)
library(caret)
library(e1071)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid(.cp = (0:50)*0.001)
trCART = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
trCART
predict(trCART$finalModel, newdata = Test, type = "class")
trGLM = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "glm")
summary(glm9Var)
summary(trGLM)
trBayesGLM = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "bayesglm")
trLineSVM = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "lssvmLinear")
install.packages("kernlab")
install.packages("kernlab")
trLineSVM = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "lssvmLinear")
library(caret)
library(rpart.plot)
trLineSVM = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "lssvmLinear")
trLogProbit = train(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163, data = Train, method = "polr")
trBayesGLM
glmBayes = trBayesGLM$finalModel
tmp <- predict(glmBayes, newd)
glm10Var = glm(Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Q100010, data = Train, family = "binomial")
predTest = predict(glm10Var, newdata = Test, type = "response")
predKag = as.character(ifelse(predTest < 0.5, "Democrat", "Republican"))
dfKaggle = data.frame(USER_ID = varTestUserId, Predictions = predKag)
write.csv(dfKaggle, "Submission_0613_05_glm10Var.csv", row.names = FALSE)
View(dfKaggle)
