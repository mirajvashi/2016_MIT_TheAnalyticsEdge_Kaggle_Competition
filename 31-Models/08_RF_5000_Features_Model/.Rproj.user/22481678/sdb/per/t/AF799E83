{
    "contents" : "AutoModel <- function(DF_INPUT, SEED=1)\n{\n###############################################################################################\n## PURPOSE: TEMPLATE R-SCRIPT TO AUTOMATE MODEL BUILDING & ACCURACY CHECK\n## USAGE: CUSTOMIZE EACH SECTION FOR SPECIFIC DATA ANALYSIS NEED\n## TECHNIQUES: GLM, CART & RANDOM FORREST\n###############################################################################################\n\n## ############################################################################################\n## MODEL LOGIC DESCRIPTION\n## DATA sET: FULLY IMPUTED - MICE PMM METHOD\n## VAR. SET: FEATURES SELECTED USING BORUTA | SCORE = 4 FEATURES\n## ############################################################################################\n\n## LOAD REQUIRED LIBRARIES\nlibrary(caTools)\nlibrary(rpart)\nlibrary(randomForest)\nlibrary(ROCR)\n\n## INITIALIZE VARIABLES\n\nPredictionFormula = c(\"Party ~ YOB + Income\", \"Party ~ YOB + Income + EducationLevel\", \"Party ~ YOB + Income + EducationLevel + Q109244\", \"Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus\", \"Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181\", \"Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163\", \"Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197 + Q101163 + Gender\", \"Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611\", \"Party ~ YOB + Income + EducationLevel + Q109244 + HouseholdStatus + Q115611 + Q113181 + Q98197\")\nModelTypes = c(\"glm\", \"CART\", \"RandomForest\")\nSplRatio <- c(0.99)\nRandSeed <- ifelse(SEED != 1, SEED, 13)\nThreshold <- c(0.50)\nTotalRows <- (((length(ModelTypes)-1) * length(SplRatio)) + (length(SplRatio) * length(Threshold)))*length(PredictionFormula)\ndfInput = DF_INPUT\nrIndex = 1\n\n## INITIALIZE OUTPUT DATA FRAME\n\ndfOutput = data.frame(matrix(NA, nrow=TotalRows, ncol=7))\ncolnames(dfOutput) = c(\"Model.Technique\", \"SplitRatio\", \"Threshold\", \"AUC\", \"TrainingSet_Accuracy\", \"TestingSet_Accuracy\", \"Prediction Formula\")\n\n## BUILD & EVALUATE MODELS\n\nfor(i3 in 1:length(PredictionFormula))\n{\n    predFormula = as.formula(PredictionFormula[i3])\n    \n    for (i in 1:length(SplRatio))\n    {\n        set.seed(RandSeed)\n        \n        ####: Needs to be customized\n        splt = sample.split(dfInput$Party, SplitRatio = SplRatio[i])\n        dfTrain = subset(dfInput, splt == TRUE)\n        dfTest = subset(dfInput, splt == FALSE)\n        \n        ####: Check for required customization before each run\n        glmModel = glm(predFormula, data = dfTrain, family = \"binomial\")\n        cartModel = rpart(predFormula, data = dfTrain, method = \"class\")\n        rfModel = randomForest(predFormula, data = dfTrain, ntree = 1500)\n        \n        for(i1 in 1:length(ModelTypes))\n        {\n            if(ModelTypes[i1] == \"glm\")\n            {\n                predTrain = predict(glmModel, type = \"response\")\n                predTest = predict(glmModel, newdata = dfTest, type = \"response\")\n                \n                ####: Check for required customization before each run\n                for(i2 in 1:length(Threshold))\n                {\n                    dfOutput[rIndex,1] = ModelTypes[i1]\n                    dfOutput[rIndex,2] = SplRatio[i]\n                    dfOutput[rIndex,3] = Threshold[i2]\n                    m = as.matrix(table(dfTrain$Party, predTrain > Threshold[i2]))\n                    dfOutput[rIndex,5] = (m[1,1] + m[2,2]) / nrow(dfTrain)\n                    dfOutput[rIndex,7] = PredictionFormula[i3]\n                    \n                    if(SplRatio[i] < 1)\n                    {\n                      dfOutput[rIndex,4] = as.numeric(performance(prediction(predTest, dfTest$Party), \"auc\")@y.values)\n                      m = as.matrix(table(dfTest$Party, predTest > Threshold[i2]))\n                      dfOutput[rIndex,6] = (m[1,1] + m[2,2]) / nrow(dfTest)\n                    }\n                    rIndex = rIndex + 1\n                }\n            }\n            \n            if(ModelTypes[i1] == \"CART\")\n            {\n                predTrain = predict(cartModel, type = \"class\")\n                predTest = predict(cartModel, newdata = dfTest, type = \"class\")\n                predTestProb = predict(cartModel, newdata = dfTest)\n                \n                ####: Check for required customization before each run\n                dfOutput[rIndex,1] = ModelTypes[i1]\n                dfOutput[rIndex,2] = SplRatio[i]\n                dfOutput[rIndex,3] = \"\"\n                m = as.matrix(table(dfTrain$Party, predTrain))\n                dfOutput[rIndex,5] = (m[1,1] + m[2,2]) / nrow(dfTrain)\n                dfOutput[rIndex,7] = PredictionFormula[i3]\n                \n                if(SplRatio[i] < 1)\n                {\n                  #dfOutput[rIndex,4] = as.numeric(performance(prediction(predTestProb[ ,2], dfTest$Party), \"auc\")@y.values)\n                  m = as.matrix(table(dfTest$Party, predTest))\n                  dfOutput[rIndex,6] = (m[1,1] + m[2,2]) / nrow(dfTest)\n                }\n                rIndex = rIndex + 1\n            }\n            \n            if(ModelTypes[i1] == \"RandomForest\")\n            {\n                predTrain = predict(rfModel, type = \"class\")\n                predTest = predict(rfModel, newdata = dfTest, type = \"class\")\n                predTestProb = predict(rfModel, newdata = dfTest)\n                \n                ####: Check for required customization before each run\n                dfOutput[rIndex,1] = ModelTypes[i1]\n                dfOutput[rIndex,2] = SplRatio[i]\n                dfOutput[rIndex,3] = \"\"\n                m = as.matrix(table(dfTrain$Party, predTrain))\n                dfOutput[rIndex,5] = (m[1,1] + m[2,2]) / nrow(dfTrain)\n                dfOutput[rIndex,7] = PredictionFormula[i3]\n                \n                if(SplRatio[i] < 1)\n                {\n                  #dfOutput[rIndex,4] = as.numeric(performance(prediction(predTestProb[ ,2], dfTest$Party), \"auc\")@y.values)\n                  m = as.matrix(table(dfTest$Party, predTest))\n                  dfOutput[rIndex,6] = (m[1,1] + m[2,2]) / nrow(dfTest)\n                }\n                rIndex = rIndex + 1\n            }\n        }\n    }\n}\n## WRITE THE OUTPUT TO CSV FILE\n    write.csv(dfOutput, \"AutoModelOutput.csv\", row.names = FALSE)\n}",
    "created" : 1465755726615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1411423499",
    "id" : "AF799E83",
    "lastKnownWriteTime" : 1465758016,
    "path" : "~/AnalyticsEdge/Week 7_Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/08_RF_5000_Features_Model/AutoModel.R",
    "project_path" : "AutoModel.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}