{
    "contents" : "AutoModel <- function(DF_INPUT, SEED=1)\n{\n###############################################################################################\n## PURPOSE: TEMPLATE R-SCRIPT TO AUTOMATE MODEL BUILDING & ACCURACY CHECK\n## USAGE: CUSTOMIZE EACH SECTION FOR SPECIFIC DATA ANALYSIS NEED\n## TECHNIQUES: GLM, CART & RANDOM FORREST\n###############################################################################################\n\n## ############################################################################################\n## MODEL LOGIC DESCRIPTION\n## DATA sET: FULLY IMPUTED - MICE PMM METHOD\n## VAR. SET: FEATURES SELECTED USING BORUTA | Features: Score = 4 & 3 & 2 + 501_FI = 1\n## ############################################################################################\n\n## LOAD REQUIRED LIBRARIES\nlibrary(caTools)\nlibrary(rpart)\nlibrary(randomForest)\nlibrary(ROCR)\n\n## INITIALIZE VARIABLES\n\nModelTypes = c(\"glm\", \"CART\", \"RandomForest\")\nSplRatio <- c(0.50,0.60,0.70,0.80,0.90,0.95)\nRandSeed <- ifelse(SEED != 1, SEED, 13)\nThreshold <- c(0.40,0.50,0.60)\nTotalRows <- ((length(ModelTypes)-1) * length(SplRatio)) + (length(SplRatio) * length(Threshold))\ndfInput = DF_INPUT\nrIndex = 1\n\n## INITIALIZE OUTPUT DATA FRAME\n\ndfOutput = data.frame(matrix(NA, nrow=TotalRows, ncol=6))\ncolnames(dfOutput) = c(\"Model.Technique\", \"SplitRatio\", \"Threshold\", \"AUC\", \"TrainingSet_Accuracy\", \"TestingSet_Accuracy\")\n\n## BUILD & EVALUATE MODELS\n\nfor (i in 1:length(SplRatio))\n{\n    set.seed(RandSeed)\n    \n    ####: Needs to be customized\n    splt = sample.split(dfInput$Party, SplitRatio = SplRatio[i])\n    dfTrain = subset(dfInput, splt == TRUE)\n    dfTest = subset(dfInput, splt == FALSE)\n    \n    ####: Check for required customization before each run\n    glmModel = glm(Party ~ Gender + Q121699 + Q120379 + Q120472 + Q118233 + Q116601 + Q115611 + Q113181 + Q109244 + Q106272 + Q101163 + Q98869 + Q98197, data = dfTrain, family = \"binomial\")\n    cartModel = rpart(Party ~ Gender + Q121699 + Q120379 + Q120472 + Q118233 + Q116601 + Q115611 + Q113181 + Q109244 + Q106272 + Q101163 + Q98869 + Q98197, data = dfTrain, method = \"class\")\n    rfModel = randomForest(Party ~ Gender + Q121699 + Q120379 + Q120472 + Q118233 + Q116601 + Q115611 + Q113181 + Q109244 + Q106272 + Q101163 + Q98869 + Q98197, data = dfTrain)\n    \n    for(i1 in 1:length(ModelTypes))\n    {\n        if(ModelTypes[i1] == \"glm\")\n        {\n            predTrain = predict(glmModel, type = \"response\")\n            predTest = predict(glmModel, newdata = dfTest, type = \"response\")\n            \n            ####: Check for required customization before each run\n            for(i2 in 1:length(Threshold))\n            {\n                dfOutput[rIndex,1] = ModelTypes[i1]\n                dfOutput[rIndex,2] = SplRatio[i]\n                dfOutput[rIndex,3] = Threshold[i2]\n                m = as.matrix(table(dfTrain$Party, predTrain > Threshold[i2]))\n                dfOutput[rIndex,5] = (m[1,1] + m[2,2]) / nrow(dfTrain)\n                \n                if(SplRatio[i] < 1)\n                {\n                  dfOutput[rIndex,4] = as.numeric(performance(prediction(predTest, dfTest$Party), \"auc\")@y.values)\n                  m = as.matrix(table(dfTest$Party, predTest > Threshold[i2]))\n                  dfOutput[rIndex,6] = (m[1,1] + m[2,2]) / nrow(dfTest)\n                }\n                rIndex = rIndex + 1\n            }\n        }\n        \n        if(ModelTypes[i1] == \"CART\")\n        {\n            predTrain = predict(cartModel, type = \"class\")\n            predTest = predict(cartModel, newdata = dfTest, type = \"class\")\n            predTestProb = predict(cartModel, newdata = dfTest)\n            \n            ####: Check for required customization before each run\n            dfOutput[rIndex,1] = ModelTypes[i1]\n            dfOutput[rIndex,2] = SplRatio[i]\n            dfOutput[rIndex,3] = \"\"\n            m = as.matrix(table(dfTrain$Party, predTrain))\n            dfOutput[rIndex,5] = (m[1,1] + m[2,2]) / nrow(dfTrain)\n            \n            if(SplRatio[i] < 1)\n            {\n              dfOutput[rIndex,4] = as.numeric(performance(prediction(predTestProb[ ,2], dfTest$Party), \"auc\")@y.values)\n              m = as.matrix(table(dfTest$Party, predTest))\n              dfOutput[rIndex,6] = (m[1,1] + m[2,2]) / nrow(dfTest)\n            }\n            rIndex = rIndex + 1\n        }\n        \n        if(ModelTypes[i1] == \"RandomForest\")\n        {\n            predTrain = predict(rfModel, type = \"class\")\n            predTest = predict(rfModel, newdata = dfTest, type = \"class\")\n            #predTestProb = predict(rfModel, newdata = dfTest)\n            \n            ####: Check for required customization before each run\n            dfOutput[rIndex,1] = ModelTypes[i1]\n            dfOutput[rIndex,2] = SplRatio[i]\n            dfOutput[rIndex,3] = \"\"\n            m = as.matrix(table(dfTrain$Party, predTrain))\n            dfOutput[rIndex,5] = (m[1,1] + m[2,2]) / nrow(dfTrain)\n            if(SplRatio[i] < 1)\n            {\n              #dfOutput[rIndex,4] = as.numeric(performance(prediction(predTestProb[ ,2], dfTest$Party), \"auc\")@y.values)\n              m = as.matrix(table(dfTest$Party, predTest))\n              dfOutput[rIndex,6] = (m[1,1] + m[2,2]) / nrow(dfTest)\n            }\n            rIndex = rIndex + 1\n        }\n    }\n}\n## WRITE THE OUTPUT TO CSV FILE\n    write.csv(dfOutput, \"AutoModel_Score_432_501Score_10_Output.csv\", row.names = FALSE)\n}",
    "created" : 1465658732928.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "86493172",
    "id" : "4FE6F5A2",
    "lastKnownWriteTime" : 1465658849,
    "path" : "D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/07_Full_Impute_Boruta_Features/AutoModel_V5.R",
    "project_path" : "AutoModel_V5.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}