TrainDF = read.csv("TrainingImputed_FULL.csv")
View(TrainDF)
TrainDF$X = NUUL
TrainDF$X = NULL
TrainDF$Party
View(TrainDF)
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V1.R')
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V1.R')
AutoModel(TrainDF, 100)
install.packages("randomForest")
install.packages("rpart.plot")
install.packages("caret")
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V1.R')
source("AutoModel_V1.r")
AutoModel(TrainDF, 100)
source("AutoModel_V1.r")
source("AutoModel_V2.r")
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V2.R')
View(AutoModel)
View(AutoModel)
source("AutoModel_V1.r")
View(AutoModel)
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V2.R')
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V2.R')
View(AutoModel)
AutoModel(TrainDF, 100)
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V3.R')
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V3.R')
AutoModel(TrainDF, 100)
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V4.R')
source('D:/11 DATA ANALYTICS/89 MIT_TheAnalyticsEdge/99 Kaggle_Competition/MIT_TheAnalyticsEdge/31-Models/03_Full_Imputation_MICE_PMM/AutoModel_V4.R')
AutoModel(TrainDF, 100)
View(AutoModel)
glmAllVar = glm(Party ~ ., TrainDF, family = "binomail")
glmAllVar = glm(Party ~ ., TrainDF, family = "binomial")
table(TrainDF$Party, predict(glmAllVar, type = "response") > 0.5)
(1971+1622) / nrow(TrainDF)
TestDF = read.csv("TestImputed_FULL.csv")
str(TestDF)
TestDF$X = NULL
predTestDF = predict(glmAllVar, newdata = TestDF, type = "response")
predTestDFChar = as.character(ifelse(predTestDF < 0.5, "Democrat", "Republican"))
KaggleDF = data.frame(USER_ID = TestDF$UserId, Predictions = predTestDFChar)
write.csv(KaggleDF, "Submission_0610_01.csv", row.names = FALSE)
summary(glmAllVar)
glmAllVarNoUserId = glm(Party ~ . -UserId, data = TrainDF, family = "binomial" )
table(TrainDF$Party, predict(glmAllVarNoUserId, type = "response")>0.5)
table(TrainDF$Party, predict(glmAllVar, type = "response")>0.5)
(1975+1607)/nrow(TrainDF)
(1971+1622)/nrow(TrainDF)
predTestDFChar = as.character(ifelse(predict(glmAllVarNoUserId, newdata = TestDF, type = "response") < 0.5, "Democrat", "Republican"))
KaggleDF = data.frame(USER_ID = TestDF$UserId, Predictions = predTestDFChar)
write.csv(KaggleDF, "Submission_0610_02.csv", row.names = FALSE)
View(AutoModel)
TrainDF1 = TrainDF
TrainDF1$UserId = NULL
rfModel1 <- randomForest(Party ~ ., data = TrainDF1)
varImpPlot(rfModel1)
class(varImpPlot(rfModel1))
m <- varImpPlot(rfModel1)
m
nrow(m)
rfModel1 <- randomForest(Party ~ ., data = TrainDF1, ntree = 10)
varImpPlot(rfModel1)
rfModel1 <- randomForest(Party ~ ., data = TrainDF1, ntree = 20)
varImpPlot(rfModel1)
rfModel1 <- randomForest(Party ~ ., data = TrainDF1, ntree = 30)
varImpPlot(rfModel1)
